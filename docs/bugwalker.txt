-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/corynz/bugwalker#readme</a>
@package bugwalker
@version 0.1.0.0


-- | Types used in the BugWalker API
module ApiTypes

-- | Api representation of a GameData build
data BuildT
BuildT :: Int -> String -> String -> BuildT
[buildIdT] :: BuildT -> Int
[buildStringT] :: BuildT -> String
[buildDateT] :: BuildT -> String

-- | Api representation of a GameData Spell
data SpellT
SpellT :: Int -> String -> String -> String -> SpellT
[spellIdT] :: SpellT -> Int
[spellNameT] :: SpellT -> String
[spellDescT] :: SpellT -> String
[spellBuildT] :: SpellT -> String

-- | Primary type of a single Bug
data Bug
Bug :: Int64 -> String -> BugSeverity -> BugType -> String -> BugStatus -> Maybe String -> Int -> Int -> Specialisation -> Maybe String -> Maybe String -> Maybe String -> Int64 -> Maybe String -> Bug
[bugId] :: Bug -> Int64
[bugDateModified] :: Bug -> String
[bugSeverity] :: Bug -> BugSeverity
[bugType] :: Bug -> BugType
[bugTitle] :: Bug -> String
[bugStatus] :: Bug -> BugStatus
[bugTags] :: Bug -> Maybe String
[bugSpellId] :: Bug -> Int
[bugBuildId] :: Bug -> Int
[bugSpec] :: Bug -> Specialisation
[bugBlueTrackerLink] :: Bug -> Maybe String
[bugSpellName] :: Bug -> Maybe String
[bugUserName] :: Bug -> Maybe String
[bugUserId] :: Bug -> Int64
[bugBuildString] :: Bug -> Maybe String

-- | Detailed representation of a Bug including the Content fields
data BugDetail
BugDetail :: Int64 -> String -> Maybe String -> BugSeverity -> BugType -> String -> BugStatus -> Maybe String -> Int -> Int -> Specialisation -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Int64 -> BugDetail
[bugdtId] :: BugDetail -> Int64
[bugdtDateCreated] :: BugDetail -> String
[bugdtDateModified] :: BugDetail -> Maybe String
[bugdtSeverity] :: BugDetail -> BugSeverity
[bugdtType] :: BugDetail -> BugType
[bugdtTitle] :: BugDetail -> String
[bugdtStatus] :: BugDetail -> BugStatus
[bugdtTags] :: BugDetail -> Maybe String
[bugdtSpellId] :: BugDetail -> Int
[bugdtBuildId] :: BugDetail -> Int
[bugdtSpec] :: BugDetail -> Specialisation
[bugdtDescription] :: BugDetail -> Maybe String
[bugdtSteps] :: BugDetail -> Maybe String
[bugdtContent] :: BugDetail -> Maybe String
[bugdtBlueTrackerLink] :: BugDetail -> Maybe String
[bugdtSubmitter] :: BugDetail -> Int64

-- | Represents the severity levels that a Bug can have
data BugSeverity
Low :: BugSeverity
Medium :: BugSeverity
Critical :: BugSeverity

-- | Represents the different types that a Bug can have
data BugType
Visual :: BugType
Mechanical :: BugType
Gameplay :: BugType
System :: BugType

-- | Represents the possible Specilisations that a monk can have
data Specialisation
All :: Specialisation
Windwalker :: Specialisation
Brewmaster :: Specialisation
Mistweaver :: Specialisation

-- | Represents the statuses that a Bug can have
data BugStatus
Closed :: BugStatus
Open :: BugStatus
Verified :: BugStatus
Archived :: BugStatus

-- | Api general ResponseMessage
data ResponseMessage
ResponseMessage :: Int -> String -> String -> ResponseMessage
[resMessageStatusCode] :: ResponseMessage -> Int
[resMessageStatus] :: ResponseMessage -> String
[resMessage] :: ResponseMessage -> String

-- | Api response type to a login request
data LoginResponseMessage
LoginResponseMessage :: Int -> String -> String -> LoginResponseMessage
[lrmStatusCode] :: LoginResponseMessage -> Int
[lrmMessage] :: LoginResponseMessage -> String
[lrmToken] :: LoginResponseMessage -> String

-- | Api response type to a Bug insertion, delete or update
data BugChangedResponseMessage
BugChangedResponseMessage :: Int -> Int64 -> String -> String -> BugChangedResponseMessage
[bcMessageStatusCode] :: BugChangedResponseMessage -> Int
[bcMessageBugId] :: BugChangedResponseMessage -> Int64
[bcMessageStatus] :: BugChangedResponseMessage -> String
[bcMessage] :: BugChangedResponseMessage -> String

-- | Api response type to a User insertion, delete or update
data UserChangedResponseMessage
UserChangedResponseMessage :: Int -> Int64 -> String -> String -> UserChangedResponseMessage
[ucMessageStatusCode] :: UserChangedResponseMessage -> Int
[ucMessageUserId] :: UserChangedResponseMessage -> Int64
[ucMessageStatus] :: UserChangedResponseMessage -> String
[ucMessage] :: UserChangedResponseMessage -> String

-- | Representation of a single Comment
data Comment
Comment :: Int64 -> String -> String -> Int64 -> String -> Int -> Int -> Int64 -> Int -> String -> Comment
[cId] :: Comment -> Int64
[cCreatedTime] :: Comment -> String
[cModifiedTime] :: Comment -> String
[cUserId] :: Comment -> Int64
[cUserName] :: Comment -> String
[cUserRole] :: Comment -> Int
[cUserAvatar] :: Comment -> Int
[cBugId] :: Comment -> Int64
[cStatus] :: Comment -> Int
[cBody] :: Comment -> String
instance Data.Aeson.Types.ToJSON.ToJSON ApiTypes.Comment
instance Data.Aeson.Types.FromJSON.FromJSON ApiTypes.Comment
instance GHC.Show.Show ApiTypes.Comment
instance Data.Aeson.Types.ToJSON.ToJSON ApiTypes.UserChangedResponseMessage
instance Data.Aeson.Types.FromJSON.FromJSON ApiTypes.UserChangedResponseMessage
instance GHC.Show.Show ApiTypes.UserChangedResponseMessage
instance GHC.Classes.Eq ApiTypes.UserChangedResponseMessage
instance Data.Aeson.Types.ToJSON.ToJSON ApiTypes.BugChangedResponseMessage
instance Data.Aeson.Types.FromJSON.FromJSON ApiTypes.BugChangedResponseMessage
instance GHC.Show.Show ApiTypes.BugChangedResponseMessage
instance GHC.Classes.Eq ApiTypes.BugChangedResponseMessage
instance Data.Aeson.Types.ToJSON.ToJSON ApiTypes.LoginResponseMessage
instance Data.Aeson.Types.FromJSON.FromJSON ApiTypes.LoginResponseMessage
instance GHC.Show.Show ApiTypes.LoginResponseMessage
instance GHC.Classes.Eq ApiTypes.LoginResponseMessage
instance Data.Aeson.Types.ToJSON.ToJSON ApiTypes.ResponseMessage
instance Data.Aeson.Types.FromJSON.FromJSON ApiTypes.ResponseMessage
instance GHC.Show.Show ApiTypes.ResponseMessage
instance GHC.Classes.Eq ApiTypes.ResponseMessage
instance Data.Aeson.Types.ToJSON.ToJSON ApiTypes.SpellT
instance Data.Aeson.Types.FromJSON.FromJSON ApiTypes.SpellT
instance GHC.Show.Show ApiTypes.SpellT
instance GHC.Classes.Eq ApiTypes.SpellT
instance Data.Aeson.Types.ToJSON.ToJSON ApiTypes.BuildT
instance Data.Aeson.Types.FromJSON.FromJSON ApiTypes.BuildT
instance GHC.Show.Show ApiTypes.BuildT
instance GHC.Classes.Eq ApiTypes.BuildT
instance Data.Aeson.Types.ToJSON.ToJSON ApiTypes.BugDetail
instance Data.Aeson.Types.FromJSON.FromJSON ApiTypes.BugDetail
instance GHC.Show.Show ApiTypes.BugDetail
instance Data.Aeson.Types.ToJSON.ToJSON ApiTypes.Bug
instance Data.Aeson.Types.FromJSON.FromJSON ApiTypes.Bug
instance GHC.Show.Show ApiTypes.Bug
instance Data.Aeson.Types.ToJSON.ToJSON ApiTypes.BugType
instance Data.Aeson.Types.FromJSON.FromJSON ApiTypes.BugType
instance GHC.Show.Show ApiTypes.BugType
instance GHC.Enum.Enum ApiTypes.BugType
instance Data.Aeson.Types.ToJSON.ToJSON ApiTypes.BugSeverity
instance Data.Aeson.Types.FromJSON.FromJSON ApiTypes.BugSeverity
instance GHC.Show.Show ApiTypes.BugSeverity
instance GHC.Enum.Enum ApiTypes.BugSeverity
instance Data.Aeson.Types.ToJSON.ToJSON ApiTypes.BugStatus
instance Data.Aeson.Types.FromJSON.FromJSON ApiTypes.BugStatus
instance GHC.Show.Show ApiTypes.BugStatus
instance GHC.Enum.Enum ApiTypes.BugStatus
instance Data.Aeson.Types.ToJSON.ToJSON ApiTypes.Specialisation
instance Data.Aeson.Types.FromJSON.FromJSON ApiTypes.Specialisation
instance GHC.Show.Show ApiTypes.Specialisation
instance GHC.Enum.Enum ApiTypes.Specialisation


-- | Types used specifically for Authentication and User management
module AuthTypes

-- | Represents a single User
data User
User :: Int64 -> Maybe String -> Maybe String -> UUID -> String -> String -> String -> Int -> Int -> User
[userId] :: User -> Int64
[userCreatedTime] :: User -> Maybe String
[userLastLogin] :: User -> Maybe String
[userUuid] :: User -> UUID
[userHash] :: User -> String
[userSalt] :: User -> String
[userName] :: User -> String
[userRole] :: User -> Int
[userAvatar] :: User -> Int

-- | Subset of User properties used in User Listings
data UserL
UserL :: Int64 -> String -> Int -> String -> Maybe String -> Int -> UserL
[userLId] :: UserL -> Int64
[userLName] :: UserL -> String
[userLRole] :: UserL -> Int
[userLCreatedTime] :: UserL -> String
[userLLastLogin] :: UserL -> Maybe String
[userLAvatar] :: UserL -> Int

-- | Subset of User properties used in User Profiles
data UserP
UserP :: Int64 -> String -> Int -> String -> Maybe String -> Int -> [Bug] -> UserP
[userPId] :: UserP -> Int64
[userPName] :: UserP -> String
[userPRole] :: UserP -> Int
[userPCreatedTime] :: UserP -> String
[userPLastLogin] :: UserP -> Maybe String
[userPAvatar] :: UserP -> Int
[userPBugs] :: UserP -> [Bug]

-- | Submitted when attempting to create a new User
data UserRegistration
UserRegistration :: String -> String -> String -> Int -> UserRegistration
[userRegName] :: UserRegistration -> String
[userRegEmail] :: UserRegistration -> String
[userRegPass] :: UserRegistration -> String
[userRegAvatar] :: UserRegistration -> Int

-- | Submitted when attempting to authenticate
data UserLoginData
UserLoginData :: String -> String -> UserLoginData
[uldName] :: UserLoginData -> String
[uldPass] :: UserLoginData -> String

-- | Returned from the AuthHandler's tryAuthenticate function
data AuthResultT
AuthOK :: String -> AuthenticatedUser -> AuthResultT
AuthFailed :: String -> AuthResultT
AuthError :: String -> AuthResultT

-- | Payload for changing a user role (mod only)
data UserChangeRoleData
UserChangeRoleData :: Int64 -> Int -> UserChangeRoleData
[ucrId] :: UserChangeRoleData -> Int64
[ucrRole] :: UserChangeRoleData -> Int

-- | Primary auth type, encoded in Bearer tokens in API calls
data AuthenticatedUser
AUser :: Int64 -> Int -> String -> String -> AuthenticatedUser
[auId] :: AuthenticatedUser -> Int64
[auRole] :: AuthenticatedUser -> Int
[auName] :: AuthenticatedUser -> String
[auSecret] :: AuthenticatedUser -> String

-- | Checks if a user is at least moderator
isUserMod :: AuthenticatedUser -> Bool

-- | Checks if a user is at least administrator
isUserAdmin :: AuthenticatedUser -> Bool

-- | The minimum role of a moderator
userModRole :: Int

-- | The minimum role of an admin
userAdminRole :: Int

-- | Checks if a user is at least initiated
isUserInit :: AuthenticatedUser -> Bool
instance GHC.Show.Show AuthTypes.AuthResultT
instance GHC.Generics.Generic AuthTypes.AuthenticatedUser
instance GHC.Show.Show AuthTypes.AuthenticatedUser
instance Data.Aeson.Types.ToJSON.ToJSON AuthTypes.AuthenticatedUser
instance Data.Aeson.Types.FromJSON.FromJSON AuthTypes.AuthenticatedUser
instance Servant.Auth.Server.Internal.JWT.ToJWT AuthTypes.AuthenticatedUser
instance Servant.Auth.Server.Internal.JWT.FromJWT AuthTypes.AuthenticatedUser
instance Data.Aeson.Types.ToJSON.ToJSON AuthTypes.UserChangeRoleData
instance Data.Aeson.Types.FromJSON.FromJSON AuthTypes.UserChangeRoleData
instance GHC.Show.Show AuthTypes.UserChangeRoleData
instance Data.Aeson.Types.ToJSON.ToJSON AuthTypes.UserLoginData
instance Data.Aeson.Types.FromJSON.FromJSON AuthTypes.UserLoginData
instance GHC.Show.Show AuthTypes.UserLoginData
instance Data.Aeson.Types.ToJSON.ToJSON AuthTypes.UserRegistration
instance Data.Aeson.Types.FromJSON.FromJSON AuthTypes.UserRegistration
instance GHC.Show.Show AuthTypes.UserRegistration
instance Data.Aeson.Types.ToJSON.ToJSON AuthTypes.UserP
instance Data.Aeson.Types.FromJSON.FromJSON AuthTypes.UserP
instance GHC.Show.Show AuthTypes.UserP
instance Data.Aeson.Types.ToJSON.ToJSON AuthTypes.UserL
instance Data.Aeson.Types.FromJSON.FromJSON AuthTypes.UserL
instance GHC.Show.Show AuthTypes.UserL
instance GHC.Show.Show AuthTypes.User


-- | Handlers related to Common API endpoints
module CommonApi

-- | Handles fetching the base version of the API
versionHandler :: Handler ResponseMessage


-- | Contains functions needed for fetching external GameData via HTTP
module Fetch

-- | Makes a HTTP GET request to fetch the GameData spell dump and returns
--   the result
fetchSpells :: Bool -> IO ByteString

-- | Fetches a local GameData spell dump (for testing)
fetchSpellsLocal :: String -> IO String


-- | Types used for the GameData lib
module GameDataTypes

-- | Represents a Game build
data Build
Build :: Int -> Int -> Int -> Int -> String -> Build
[expV] :: Build -> Int
[major] :: Build -> Int
[minor] :: Build -> Int
[version] :: Build -> Int
[date] :: Build -> String

-- | Collection of Game Spells for a given Build
data SpellData
SpellData :: Build -> [Spell] -> SpellData
[build] :: SpellData -> Build
[spells] :: SpellData -> [Spell]

-- | A single Game Spell
data Spell
Spell :: Int -> String -> String -> Spell
[spellId] :: Spell -> Int
[spellName] :: Spell -> String
[spellDesc] :: Spell -> String

-- | Attempts to generate a Build representation of a given buildstring and
--   date.
createBuild :: String -> String -> Either String Build

-- | Generate a String representation of a Build
toBuildString :: Build -> String
instance GHC.Classes.Eq GameDataTypes.SpellData
instance GHC.Show.Show GameDataTypes.SpellData
instance GHC.Classes.Eq GameDataTypes.Spell
instance GHC.Classes.Eq GameDataTypes.Build
instance GHC.Show.Show GameDataTypes.Build
instance GHC.Show.Show GameDataTypes.Spell


-- | Functions related to storing and extracting the master JWK to disk
module JwkStore

-- | Attempts to either load an existing JWK from store (disk) or generates
--   a new JWK and returns it in a tuple with the first bool indicating
--   whether or not it was read or generated
loadJwk :: FilePath -> IO (Bool, JWK)


-- | Contains functions needed for parsing spelldump data into ADTs.
module Parser

-- | Attempts to parse a list of SpellData dump chunks to extract a list of
--   Spells.
parseSpells :: String -> [String] -> [Spell]

-- | Attempts to parse a SpellData dump and generate the full SpellData
--   representation of it
parseSpellData :: String -> String -> String -> Maybe SpellData

module Queue
newtype WriteQueue a
WriteQueue :: TQueue a -> WriteQueue a
[getWriteQueue] :: WriteQueue a -> TQueue a
writeQueue :: WriteQueue a -> a -> STM ()
newtype ReadQueue a
ReadQueue :: TQueue a -> ReadQueue a
[getReadQueue] :: ReadQueue a -> TQueue a
readQueue :: ReadQueue a -> STM a
flushQueue :: ReadQueue a -> STM [a]


-- | Provides threadsafe logging using a TQueue, should run on a dedicated
--   logging thread
module Logging

-- | The main logging thread entry point, should be run in forkIO
startLoggingThread :: LogLevel -> FilePath -> ReadQueue LogEntry -> IO ()
data LogEntry
LogEntry :: LogLevel -> Text -> Text -> LogEntry
[logEntryLevel] :: LogEntry -> LogLevel
[logEntryTag] :: LogEntry -> Text
[logEntryText] :: LogEntry -> Text

-- | The logging context to be passed around for enqueuing log entries
data Logger
Logger :: !WriteQueue LogEntry -> Logger
[lcLogQueue] :: Logger -> !WriteQueue LogEntry
data LogLevel
Debug :: LogLevel
Info :: LogLevel
Warning :: LogLevel
Error :: LogLevel
All :: LogLevel

-- | Log a debug message
logDebug :: Loggable l => l -> Text -> Text -> IO ()

-- | Log an error message
logError :: Loggable l => l -> Text -> Text -> IO ()

-- | Log a warning message
logWarning :: Loggable l => l -> Text -> Text -> IO ()

-- | Log an info message
logInfo :: Loggable l => l -> Text -> Text -> IO ()
instance GHC.Show.Show Logging.LogEntry
instance GHC.Classes.Eq Logging.LogEntry
instance GHC.Classes.Ord Logging.LogLevel
instance GHC.Show.Show Logging.LogLevel
instance GHC.Classes.Eq Logging.LogLevel
instance Logging.Loggable Logging.Logger
instance Logging.Loggable (Queue.WriteQueue Logging.LogEntry)
instance Logging.Loggable GHC.IO.Handle.Types.Handle


-- | Contains functions for creating the underlying SQLite datastore.
module SQLiteFactory

-- | Creates a new db or connects to an existing one at the default path
--   and creates the basic table structure
createDb :: Bool -> IO ()

-- | The default path of the sqlite data store
dbPath :: String
instance Database.SQLite.Simple.FromField.FromField ApiTypes.BugSeverity
instance Database.SQLite.Simple.FromField.FromField ApiTypes.BugType
instance Database.SQLite.Simple.FromField.FromField ApiTypes.BugStatus
instance Database.SQLite.Simple.FromField.FromField ApiTypes.Specialisation
instance Database.SQLite.Simple.FromRow.FromRow ApiTypes.Bug
instance Database.SQLite.Simple.FromRow.FromRow ApiTypes.BugDetail
instance Database.SQLite.Simple.FromRow.FromRow ApiTypes.SpellT
instance Database.SQLite.Simple.FromRow.FromRow ApiTypes.Comment
instance Database.SQLite.Simple.FromField.FromField Data.UUID.Types.Internal.UUID
instance Database.SQLite.Simple.FromRow.FromRow AuthTypes.User
instance Database.SQLite.Simple.ToRow.ToRow AuthTypes.User
instance Database.SQLite.Simple.FromRow.FromRow AuthTypes.UserL


-- | Contains functions for interacting with the underlying SQLite
--   datastore.
module SQLiteProvider

-- | Creates a new db or connects to an existing one at the default path
--   and creates the basic table structure
createDb :: Bool -> IO ()
insertSpellData :: SpellData -> IO ()
selectBuilds :: IO [(Int, String, String)]
selectSpells :: IO [SpellT]

-- | Inserts a single bug into the database @todo refactor to use ToRow
insertBug :: Int -> Int -> String -> String -> Int -> Int -> Int -> String -> String -> String -> String -> Int64 -> IO (Maybe Int64)
selectBug :: Int64 -> IO (Maybe BugDetail)
updateBug :: Int64 -> BugDetail -> IO (Maybe Int64)
deleteBug :: Int64 -> IO Bool
selectBugs :: Int -> IO [Bug]
selectBugs' :: Int -> IO [Bug]
insertUser :: User -> IO (Maybe Int64)
selectUser :: Int64 -> IO (Maybe User)
selectUserL :: Int64 -> IO (Maybe UserL)
selectUserByName :: String -> IO (Maybe User)
selectBugsByUser :: Int64 -> IO [Bug]
selectUsers :: IO [UserL]
updateUserRole :: Int64 -> Int -> IO Bool
insertComment :: Comment -> IO (Maybe Int64)

-- | Attempts to fetch a single comment from the data store
selectComment :: Int64 -> IO (Maybe Comment)
selectComments :: Int64 -> IO [Comment]

-- | Deletes a single comment from the data store
deleteComment :: Int64 -> IO Bool

-- | Deletes all comments submitted by a User (used when deleting the user)
deleteCommentsByUser :: Int64 -> IO Bool


-- | IO Abstraction handler used to interact with an underlying data store.
--   All Datastore io should go through this.
module IOH

-- | Calls on the underlying provider to init its datastore
initIO :: Bool -> IO ()

-- | Attempt to store a full SpellData collection (from a GameData update)
storeSpellData :: SpellData -> IO ()

-- | Fetches all builds from the data store
getBuilds :: IO [BuildT]

-- | Fetches all spells from the data store
getSpells :: IO [SpellT]

-- | Attempt to insert a Bug into the data store
storeBug :: BugDetail -> IO (Maybe Int64)

-- | Attempt to update the stored data of a bug
changeBug :: AuthenticatedUser -> Int64 -> BugDetail -> IO (Either IOHError Int64)

-- | Attempt to fetch a bug from the data store
getBug :: Int64 -> IO (Maybe BugDetail)

-- | Attempt to delete a bug from the data store
removeBug :: AuthenticatedUser -> Int64 -> IO (Either IOHError Bool)

-- | Fetches all the bugs from the data store
getBugs :: Int -> IO [Bug]

-- | Fetches all the bugs from the data store that were submitted by the
--   provided userId
getBugsByUser :: Int64 -> IO [Bug]

-- | Attempts to insert a User in to the data store
storeUser :: User -> IO (Either IOHError Int64)

-- | Attempts to fetch a user from the data store
getUser :: Int64 -> IO (Either IOHError User)

-- | Attempts to fetch a user from the data store (by name)
getUserByName :: String -> IO (Either IOHError User)

-- | Fetches all users fromthe data store
getUsers :: IO [UserL]

-- | Fetches a subset of User properties from the data store (for User
--   listing)
getUserL :: Int64 -> IO (Either IOHError UserL)

-- | (Mod only) Attempts to change the userRole of a given user
changeUserRole :: AuthenticatedUser -> Int64 -> Int -> IO (Either IOHError Int64)

-- | Attempts to insert a Comment into the data store
storeComment :: AuthenticatedUser -> Comment -> IO (Either IOHError Int64)

-- | Fetches all comments for a given bugId
getComments :: Int64 -> IO (Either IOHError [Comment])

-- | Deletes a single comment from the data store
deleteComment :: AuthenticatedUser -> Int64 -> IO (Either IOHError Bool)

-- | Represents differnet errors that can occur during IOH actions
data IOHError
IOHInsertError :: String -> IOHError
IOHFetchError :: String -> IOHError
IOHDeleteError :: String -> IOHError
IOHAuthError :: String -> IOHError
IOHUpdateError :: String -> IOHError
instance GHC.Show.Show IOH.IOHError


-- | The main gamedata module which exports functions for running a full
--   update of the gamedata by fetching data from Github, parsing it and
--   inserting it to a given db
module GameData

-- | Main entry point of the module, attempts to do a full gamedata update
runGameDataUpdate :: Bool -> Bool -> IO ()


-- | Handlers related to Comment API endpoints
module CommentApi

-- | Handler for fetching comments for a bugId
getCommentsHandler :: Int64 -> Handler [Comment]

-- | Handler for getting comments submitted by a specific userId @todo
--   implement
getCommentsByUserHandler :: Int64 -> Handler [Comment]

-- | (Init+ Only) Handler for submitting a new Comment
postCommentHandler :: AuthenticatedUser -> Comment -> Handler ResponseMessage

-- | (Init+ Only) Handler for deleting a single Comment
deleteCommentHandler :: AuthenticatedUser -> Int64 -> Handler ResponseMessage


-- | Handlers related to Bug API endpoints
module BugApi

-- | Handles fetching bugs
getBugsHandler :: Maybe Int -> Handler [Bug]

-- | Handles fetching bugs by userId
getBugsByUserHandler :: Int64 -> Handler [Bug]

-- | Handles fetching a single bug
getBugHandler :: Int64 -> Handler BugDetail

-- | (Init+ Only) Handles fsubmitting a new request
postBugHandler :: AuthenticatedUser -> BugDetail -> Handler BugChangedResponseMessage

-- | (Init+ only) Attempts to update a bug with the provided data
putBugHandler :: AuthenticatedUser -> Int64 -> BugDetail -> Handler BugChangedResponseMessage

-- | (Init+ Only) Handles deleting a single bug
deleteBugHandler :: AuthenticatedUser -> Int64 -> Handler BugChangedResponseMessage


-- | Handlers related to GameData Asset API endpoints
module AssetApi

-- | Handles listing builds
listBuildsHandler :: Handler [BuildT]

-- | Handles listing spells
listSpellsHandler :: Handler [SpellT]

-- | (Mod Only) Handles a request to run a full GameData update
iohInitHandler :: AuthenticatedUser -> String -> Handler ResponseMessage


-- | toolchain of utils used throughout the application
module Utils

-- | Generic API error type used for user input validation
data ApiError
ValidationError :: String -> String -> ApiError
ResourceNotFoundError :: String -> ApiError

-- | Validation result used when parsing user login data inputs
data ValidationResult
Invalid :: String -> ValidationResult
Valid :: ValidationResult
instance GHC.Show.Show Utils.ValidationResult
instance GHC.Show.Show Utils.ApiError
instance GHC.Exception.Type.Exception Utils.ApiError


-- | module handling authentication and creation of users
module AuthHandler

-- | Attempts to validate and create a new User object from the given
--   registration data
createUser :: (UserPrinter m, UUIDGenerator m) => UserRegistration -> Int -> m (Either ApiError User)

-- | Attempts to authenticate a given user with the given password
tryAuthenticate :: User -> String -> AuthResultT
instance AuthHandler.UUIDGenerator GHC.Types.IO
instance AuthHandler.UserPrinter GHC.Types.IO


-- | Handlers related to User API endpoints
module UserApi

-- | Handles user registration requests by asking the AuthHandler to create
--   the user and then asks the IOH to store the new user
userRegistrationHandler :: UserRegistration -> Handler UserChangedResponseMessage

-- | Handles user login by getting the User object from the IOH and asking
--   the AuthHandler to authenticate. Creates a JWT token on success
userLoginHandler :: JWTSettings -> UserLoginData -> Handler LoginResponseMessage

-- | Handles listing users
getUsersHandler :: Handler [UserL]

-- | Handles feching of UserProfile objects
getUserPHandler :: Int64 -> Handler UserP

-- | Handles changing a user's role (mod only)
changeUserRoleHandler :: AuthenticatedUser -> UserChangeRoleData -> Handler UserChangedResponseMessage


-- | Main module of the BugWalker WebAPI Server
module BugWalkerServer

-- | The main "run" function of the BugWalker API Server. Attempts to run
--   the full WAI server using JWT auth
runServerWithJWT :: Logger -> Int -> IO ()

-- | Creates the full server by combining the unprotcted and protected
--   servers and their auth contexts
server :: CookieSettings -> JWTSettings -> Server (API auths)


-- | Main module of the BugWalkerLib
module BugWalkerLib

-- | Starts the BugwalkerAPI Server with full JWT auth
run :: Int -> Bool -> IO ()
